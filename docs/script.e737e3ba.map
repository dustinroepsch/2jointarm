{"version":3,"sources":["script.ts"],"names":[],"mappings":";AAAA,IAAI,EAA4B,SAAS,eAAe,cAEpD,EAAgC,EAAO,WAAW,MAEtD,EAAA,WAEI,SAAA,IACS,KAAA,SAAW,KAAK,MAQ7B,OALW,EAAA,UAAA,KAAP,WACQ,IAAA,EAAgB,KAAK,MAAQ,KAAK,SAE/B,OADF,KAAA,SAAW,KAAK,MACd,EAAQ,KAEvB,EAXA,GAYA,EAAA,WAEA,OADI,SAAmB,EAAkB,GAAlB,KAAA,EAAA,EAAkB,KAAA,EAAA,GADzC,GAIA,SAAS,EAAY,EAAQ,GACrB,IAAA,EAAO,EAAO,wBACX,OAAA,IAAI,EACP,EAAI,QAAU,EAAK,KACnB,EAAI,QAAU,EAAK,KAI3B,SAAS,EAAU,EAAU,GAClB,OAAA,KAAK,KAAK,KAAA,IAAC,EAAE,EAAI,EAAE,EAAM,GAAI,KAAA,IAAC,EAAE,EAAI,EAAE,EAAK,IAKtD,IAAA,EAAA,WAKI,SAAA,EAAmB,EAA0B,GAA1B,KAAA,UAAA,EAA0B,KAAA,UAAA,EAJrC,KAAA,OAAiB,EACjB,KAAA,OAAiB,EACjB,KAAA,UAAoB,EAAO,MAAQ,IAyD/C,OArDI,EAAA,UAAA,MAAA,WACW,OAAA,IAAI,EAAM,KAAK,UAAY,KAAK,IAAI,KAAK,QAAU,KAAK,UAAW,KAAK,UAAY,KAAK,IAAI,KAAK,QAAU,KAAK,YAG5H,EAAA,UAAA,MAAA,WACQ,IAAA,EAAK,KAAK,QACP,OAAA,IAAI,EAAM,EAAG,EAAI,KAAK,IAAI,KAAK,QAAU,KAAK,UAAW,EAAG,EAAI,KAAK,IAAI,KAAK,QAAU,KAAK,YAGxG,EAAA,UAAA,OAAA,WACI,EAAI,YACJ,EAAI,QAAQ,KAAK,UAAW,KAAK,UAAW,GAAI,GAAI,EAAG,EAAG,EAAI,KAAK,IACnE,EAAI,SAGA,IAAA,EAAY,KAAK,QAErB,EAAI,YACJ,EAAI,OAAO,KAAK,UAAW,KAAK,WAChC,EAAI,OAAO,EAAG,EAAG,EAAG,GACpB,EAAI,SAEJ,EAAI,YACJ,EAAI,QAAQ,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAI,KAAK,IAC/C,EAAI,SAEA,IAAA,EAAY,KAAK,QAErB,EAAI,YACJ,EAAI,OAAO,EAAG,EAAG,EAAG,GACpB,EAAI,OAAO,EAAG,EAAG,EAAG,GACpB,EAAI,SAEJ,EAAI,YACJ,EAAI,QAAQ,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAI,KAAK,IAC/C,EAAI,UAGD,EAAA,UAAA,YAAP,SAAmB,GAOR,IANH,IAAA,EAA2B,EAAS,EAAK,KAAK,SAC9C,EAAQ,EAER,EAAa,KAAK,OAClB,EAAa,KAAK,OAEf,EAAQ,IAAM,EAAS,EAAK,KAAK,UAAY,GAChD,IACK,KAAA,OAAS,GAAc,KAAK,SAAW,IAAM,IAC7C,KAAA,OAAS,GAAc,KAAK,SAAW,IAAM,KAK9D,EA5DA,GA+DI,EAAW,IAAI,EAAI,EAAO,MAAQ,GAAI,EAAO,OAAS,IACtD,EAAa,IAAI,EAAM,EAAG,GAO9B,SAAS,IACL,EAAI,UAAU,EAAG,EAAG,EAAO,MAAO,EAAO,QACzC,EAAI,SARR,EAAO,iBAAiB,YAAa,SAAC,GACjC,EAAM,EAAY,EAAQ,KAY/B,IAAI,EAAuB,IAAI,EAC/B,SAAS,IACA,IAAA,IAAI,EAAI,EAAG,EAAI,IAAM,IACtB,EAAI,YAAY,GAGpB,IACA,sBAAsB,GAG1B,sBAAsB","file":"script.e737e3ba.map","sourceRoot":"..","sourcesContent":["let canvas: HTMLCanvasElement = document.getElementById(\"mainCanvas\") as HTMLCanvasElement;\n\nlet ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\nclass Stopwatch {\n    private lastTime: number;\n    constructor() {\n        this.lastTime = Date.now();\n    }\n\n    public tick() {\n        let delta: number = Date.now() - this.lastTime;\n        this.lastTime = Date.now();\n        return delta / 1000; //seconds\n    }\n}\nclass Point {\n    constructor(public x: number, public y: number) { }\n}\n\nfunction getMousePos(canvas, evt): Point {\n    var rect = canvas.getBoundingClientRect();\n    return new Point(\n        evt.clientX - rect.left,\n        evt.clientY - rect.top\n    );\n}\n\nfunction distance( a: Point, b: Point): number {\n    return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) **2);\n}\n\n\n\nclass Arm {\n    private angle0: number = 0;\n    private angle1: number = 0;\n    private armLength: number = canvas.width / 2.5;\n\n    constructor(public positionX: number, public positionY: number) { }\n\n    getP0(): Point {\n        return new Point(this.positionX + Math.cos(this.angle0) * this.armLength, this.positionY + Math.sin(this.angle0) * this.armLength);\n    }\n\n    getP1(): Point {\n        let p0 = this.getP0();\n        return new Point(p0.x + Math.cos(this.angle1) * this.armLength, p0.y + Math.sin(this.angle1) * this.armLength);\n    }\n\n    render(): void {\n        ctx.beginPath();\n        ctx.ellipse(this.positionX, this.positionY, 10, 10, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n\n\n        let p0: Point = this.getP0();\n\n        ctx.beginPath();\n        ctx.moveTo(this.positionX, this.positionY);\n        ctx.lineTo(p0.x, p0.y);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.ellipse(p0.x, p0.y, 10, 10, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n\n        let p1: Point = this.getP1();\n\n        ctx.beginPath();\n        ctx.moveTo(p0.x, p0.y);\n        ctx.lineTo(p1.x, p1.y);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.ellipse(p1.x, p1.y, 10, 10, 0, 0, 2 * Math.PI);\n        ctx.stroke();\n    }\n\n    public moveTowards(pos: Point) {\n        let startingDistance: number = distance(pos, this.getP1());\n        let count = 0;\n\n        let startingA0 = this.angle0;\n        let startingA1 = this.angle1;\n        \n        while (count < 10 && distance(pos, this.getP1()) >= startingDistance) {\n            count++;\n            this.angle0 = startingA0 + (Math.random() - .5) / 2000;\n            this.angle1 = startingA1 + (Math.random() - .5) / 2000;\n        }\n        \n    }\n\n}\n\n\nlet arm: Arm = new Arm(canvas.width / 10, canvas.height / 10);\nlet pos: Point = new Point(0, 0);\ncanvas.addEventListener(\"mousemove\", (evt) => {\n     pos = getMousePos(canvas, evt);\n})\n\n\n\nfunction render() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    arm.render();\n}\n\n\n\nlet stopwatch: Stopwatch = new Stopwatch();\nfunction mainLoop(): void {\n    for (let i = 0; i < 1000; i++) {\n        arm.moveTowards(pos);\n    }\n\n    render();\n    requestAnimationFrame(mainLoop);\n}\n\nrequestAnimationFrame(mainLoop);\n"]}